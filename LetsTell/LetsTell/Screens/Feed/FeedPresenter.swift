//
//  FeedPresenter.swift
//  LetsTell
//
//  Created by Павел Чернышев on 02.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FeedPresentationLogic {
    func presentFeed(response: Feed.Network.Response)
    func presentRefreshedFeed(response: Feed.Network.Response)
    func presentStoryImage(response: Feed.StoryImage.Response)
}

class FeedPresenter: FeedPresentationLogic {
    
    weak var viewController: FeedDisplayLogic?
    
    func presentFeed(response: Feed.Network.Response) {
        switch response.feed {
        case .success(let feedResponse):
            let viewModel = Feed.Network.ViewModel(
                stories: feedResponse.body,
                hasMoreStories: feedResponse.meta.currentPage == feedResponse.meta.lastPage,
                currentPage: feedResponse.meta.currentPage
            )
            viewController?.displayFeed(viewModel: viewModel)
        case .failure(let error):
            viewController?.displayFeed(error: error.localizedDescription)
        }
    }
    
    func presentRefreshedFeed(response: Feed.Network.Response) {
        switch response.feed {
        case .success(let feedResponse):
            let viewModel = Feed.Network.ViewModel(
                stories: feedResponse.body,
                hasMoreStories: feedResponse.meta.currentPage == feedResponse.meta.lastPage,
                currentPage: feedResponse.meta.currentPage
            )
            viewController?.displayRefreshedFeed(viewModel: viewModel)
        case .failure(let error):
            viewController?.displayFeed(error: error.localizedDescription)
        }
    }
    
    func presentStoryImage(response: Feed.StoryImage.Response) {
        switch response.image {
        case .success(let uiImage):
            let viewModel = Feed.StoryImage.ViewModel(story: response.story, image: uiImage)
            viewController?.displayStoryImage(viewModel: viewModel)
        case .failure:
            let viewModel = Feed.StoryImage.ViewModel(story: response.story, image: nil)
            viewController?.displayStoryImage(viewModel: viewModel)
        }
    }
}
