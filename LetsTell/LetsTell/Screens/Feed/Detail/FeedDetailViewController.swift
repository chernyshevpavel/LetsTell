//
//  FeedDetailViewController.swift
//  LetsTell
//
//  Created by Павел Чернышев on 19.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FeedDetailDisplayLogic: class {
    func displaySteps(viewModel: FeedDetail.Steps.ViewModel)
}

class FeedDetailViewController: FeedDetailDisplayLogic, ObservableObject {
    
    @Published var steps: [StoryStep] = []
    @Published var error: String = ""
    
    var interactor: FeedDetailBusinessLogic?
    var router: (NSObjectProtocol & FeedDetailRoutingLogic & FeedDetailDataPassing)?
    
    private var isSetuped = false
    
    public func setup(container: ObjectsGetter) {
        steps = []
        
        if !isSetuped {
            let viewController = self
            let interactor = FeedDetailInteractor(requestFactory: container.getObject(),
                                                  storeToken: container.getObject(),
                                                  authController: container.getObject())
            let presenter = FeedDetailPresenter()
            let router = FeedDetailRouter()
            viewController.interactor = interactor
            viewController.router = router
            interactor.presenter = presenter
            presenter.viewController = viewController
            router.viewController = viewController
            router.dataStore = interactor
            isSetuped = true
        }
    }
    
    func getIndexForStep(step: StoryStep) -> Int {
        var index = 1
        for storyStep in steps {
            if storyStep.id == step.id {
                break
            }
            index += 1
        }
        return index
    }
    
    func loadSteps(story: Story) {
        let request = FeedDetail.Steps.Request(story: story)
        interactor?.loadSteps(request: request)
    }
    
    func displaySteps(viewModel: FeedDetail.Steps.ViewModel) {
        guard viewModel.error == nil else {
            DispatchQueue.main.async {
                self.error = viewModel.error ?? ""
            }
            return
        }
        DispatchQueue.main.async {
            self.steps = viewModel.steps
        }
    }
}
