//
//  FeedInteractor.swift
//  LetsTell
//
//  Created by Павел Чернышев on 02.04.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol FeedBusinessLogic {
    func loadFeed(request: Feed.Network.Request)
    func refreshFeed(request: Feed.Network.Request)
    func loadFeedImages(request: Feed.StoryImage.Request)
}

class FeedInteractor: FeedBusinessLogic {
    var presenter: FeedPresentationLogic?
    var requestFactory: RequestFactory
    var storeToken: TokenStorage
    var authController: AuthViewController
    var applyedFiltersStorage: ApplyedFiltersStorage
    var ownerStorage: OwnerStorage
    var errorLogger: ErrorLogger?
    
    init(
        requestFactory: RequestFactory,
        storeToken: TokenStorage,
        authController: AuthViewController,
        applyedFiltersStorage: ApplyedFiltersStorage,
        ownerStorage: OwnerStorage
    ) {
        self.requestFactory = requestFactory
        self.storeToken = storeToken
        self.authController = authController
        self.applyedFiltersStorage = applyedFiltersStorage
        self.ownerStorage = ownerStorage
    }
    
    func loadFeed(request: Feed.Network.Request) {
        doRequest(request: request) { respnseForPresenter in
            self.presenter?.presentFeed(response: respnseForPresenter)
        }
    }
    
    func refreshFeed(request: Feed.Network.Request) {
        doRequest(request: request) { respnseForPresenter in
            self.presenter?.presentRefreshedFeed(response: respnseForPresenter)
        }
    }
    
    private func doRequest(request: Feed.Network.Request, completion: @escaping (Feed.Network.Response) -> Void) {
        guard let token = storeToken.getToken() else {
            authController.logout()
            return
        }
        requestFactory.setToken(token: token)
        let errorParser = ErrorParserState<ErrorList>()
        let feedFactory = requestFactory.makeFeedFactory(errorParser: errorParser)
        feedFactory.get(page: request.page, filters: self.getActiveFilters()) { response in
            switch response.result {
            case .success(let feedResponse):
                let respnseForPresenter = Feed.Network.Response(feed: NetworkResult.success(feedResponse))
                completion(respnseForPresenter)
            case .failure(let error):
                var nsError: NSError?
                if let parsedError = errorParser.parsedError {
                    nsError = NSError(
                        domain: "FeedInteractor \(parsedError.localizedDescription)",
                        code: NSError.ErrorCodes.feedNetworkParsedError.rawValue,
                        userInfo: ["errors": parsedError.errors.joined(separator: "; ")])
                } else {
                    nsError = NSError(
                        domain: "FeedInteractor \(error.localizedDescription)",
                        code: NSError.ErrorCodes.feedNetworkAFError.rawValue,
                        userInfo: ["error": error.localizedDescription])
                }
                print(error)
                guard let nsErrorUnwrped = nsError else {
                    return
                }
                let respnseForPresenter = Feed.Network.Response(feed: NetworkResult.failure(nsErrorUnwrped))
                self.errorLogger?.log(nsErrorUnwrped)
                completion(respnseForPresenter)
            }
        }
    }
    
    private func getActiveFilters() -> FeedRequestFilters? {
        guard let user = ownerStorage.getOwner() else {
            return nil
        }
        
        let applyedFilters = applyedFiltersStorage.get(forUser: user.id)
        
        guard !applyedFilters.isEmpty else {
            return nil
        }
        
        var feedRequestFilter = FeedRequestFilters()
        for filter in applyedFilters {
            switch filter.type {
            case .language:
                feedRequestFilter.languageId = filter.value
            case .ganre:
                feedRequestFilter.genreId = filter.value
            }
        }
        return feedRequestFilter
    }
    
    func loadFeedImages(request: Feed.StoryImage.Request) {
        let storiesWithImage = request.stories.filter { story -> Bool in
            guard let imageUrl = story.coverFull else {
                return false
            }
            return !imageUrl.isEmpty
        }
        
        guard !storiesWithImage.isEmpty else {
            return
        }
        
        for story in storiesWithImage {
            guard let imageUrl = story.coverFull else {
                return
            }
            
            DispatchQueue.global(qos: .userInteractive).async {
                AF.request(imageUrl, method: .get).response { [weak self] response in
                    guard let self = self else { return }
                    switch response.result {
                    case .success(let responseData):
                        guard let data = responseData else {
                            return
                        }
                        guard let image = UIImage(data: data, scale: 1) else {
                            return
                        }
                        let responseModel = Feed.StoryImage.Response(story: story, image: .success(image))
                        self.presenter?.presentStoryImage(response: responseModel)
                    case .failure(let error):
                        let nsError = NSError(
                            domain: "FeedInteractor",
                            code: NSError.ErrorCodes.imageNetworkAFError.rawValue,
                            userInfo: ["error": error.localizedDescription])
                        let responseModel = Feed.StoryImage.Response(story: story, image: .failure(nsError))
                        self.errorLogger?.log(nsError)
                        self.presenter?.presentStoryImage(response: responseModel)
                    }
                }
            }
        }
    }
    
}
