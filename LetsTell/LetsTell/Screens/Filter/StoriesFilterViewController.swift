//
//  StoriesFilterViewController.swift
//  LetsTell
//
//  Created by Павел Чернышев on 26.05.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StoriesFilterDisplayLogic: class {
    func displayFilters(viewModel: StoriesFilter.Filters.ViewModel)
    func displayApplying(viewModel: StoriesFilter.Applying.ViewModel)
}

class StoriesFilterViewController: UIViewController, ObservableObject, StoriesFilterDisplayLogic {
    var interactor: StoriesFilterBusinessLogic?
    @Published var currentlyLoading = false
    @Published var filters: [FilterSectionModel] = []
    @Published var errorMessage = ""
    
    private var isInit = false
    var chengedFiltersApplying: (() -> Void)?
    
    // MARK: Setup
    
    public func setup(container: ObjectsGetter) {
        if !isInit {
            let viewController = self
            let interactor = StoriesFilterInteractor(requestFactory: container.getObject(),
                                                     storeToken: container.getObject(),
                                                     authController: container.getObject(),
                                                     filtersStorage: container.getObject(),
                                                     userStorage: container.getObject())
            let presenter = StoriesFilterPresenter()
            viewController.interactor = interactor
            interactor.presenter = presenter
            interactor.errorLogger = PrintLogger()
            presenter.viewController = viewController
            isInit = true
        }
    }
}

// MARK: - Load & Display filters
extension StoriesFilterViewController {
    
    func loadFilters() {
        if !currentlyLoading {
            self.currentlyLoading = true
            DispatchQueue.global(qos: .userInitiated).async { [self] in
                let request = StoriesFilter.Filters.Request()
                interactor?.loadFilters(request: request)
            }
        }
    }
    
    func displayFilters(viewModel: StoriesFilter.Filters.ViewModel) {
        DispatchQueue.main.async {
            switch viewModel.filtersResult {
            case .success(let filters):
                self.filters = filters
            case .failure(let error):
                self.errorMessage = error
            }
            self.currentlyLoading = false
        }
    }
}

// MARK: - tap to check button
extension StoriesFilterViewController {
    
    /// Only one row in section can be active
    /// - Parameters:
    ///   - model: tapped row
    ///   - filterType: for to find section
    /// - Returns: Void
    func onCheckMarkTap(model: FilterModel, filterType: FiltersType) {
        guard let filtersSectionIndex = filters.firstIndex(where: { $0.id == filterType }) else {
            return
        }
        
        var updatedRows: [FilterModel] = []
        
        filters[filtersSectionIndex].rows.forEach { filterModel in
            var row = filterModel
            if row.id == model.id {
                row.active.toggle()
            } else {
                row.active = false
            }
            updatedRows.append(row)
        }
        
        filters[filtersSectionIndex].rows = updatedRows
    }
    
    func resetFilters() {
        var resetFilters: [FilterSectionModel] = []
        
        for section in filters {
            var resetSection = section
            resetSection.rows = []
            section.rows.forEach { filterModel in
                var row = filterModel
                row.active = false
                resetSection.rows.append(row)
            }
            resetFilters.append(resetSection)
        }
        
        filters = resetFilters
    }
}

// MARK: - Filters applying
extension StoriesFilterViewController {
    func apply() {
        DispatchQueue.global(qos: .userInteractive).async {
            self.interactor?.apply(request: .init(filters: self.filters))
        }
    }
    
    func displayApplying(viewModel: StoriesFilter.Applying.ViewModel) {
        if viewModel.filersChanged {
            DispatchQueue.main.async {
                self.chengedFiltersApplying?()
            }
        }
    }
}
